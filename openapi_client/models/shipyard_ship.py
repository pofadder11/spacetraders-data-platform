# coding: utf-8

"""
SpaceTraders API

SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.

The version of the OpenAPI document: v2.3.0
Contact: joel@spacetraders.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Self

from openapi_client.models.activity_level import ActivityLevel
from openapi_client.models.ship_engine import ShipEngine
from openapi_client.models.ship_frame import ShipFrame
from openapi_client.models.ship_module import ShipModule
from openapi_client.models.ship_mount import ShipMount
from openapi_client.models.ship_reactor import ShipReactor
from openapi_client.models.ship_type import ShipType
from openapi_client.models.shipyard_ship_crew import ShipyardShipCrew
from openapi_client.models.supply_level import SupplyLevel


class ShipyardShip(BaseModel):
    """
    Ship details available at a shipyard.
    """  # noqa: E501

    type: ShipType
    name: StrictStr = Field(description="Name of the ship.")
    description: StrictStr = Field(description="Description of the ship.")
    activity: Optional[ActivityLevel] = None
    supply: SupplyLevel
    purchase_price: StrictInt = Field(
        description="The purchase price of the ship.", alias="purchasePrice"
    )
    frame: ShipFrame
    reactor: ShipReactor
    engine: ShipEngine
    modules: List[ShipModule] = Field(description="Modules installed in this ship.")
    mounts: List[ShipMount] = Field(description="Mounts installed in this ship.")
    crew: ShipyardShipCrew
    __properties: ClassVar[List[str]] = [
        "type",
        "name",
        "description",
        "activity",
        "supply",
        "purchasePrice",
        "frame",
        "reactor",
        "engine",
        "modules",
        "mounts",
        "crew",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShipyardShip from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of frame
        if self.frame:
            _dict["frame"] = self.frame.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reactor
        if self.reactor:
            _dict["reactor"] = self.reactor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of engine
        if self.engine:
            _dict["engine"] = self.engine.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in modules (list)
        _items = []
        if self.modules:
            for _item_modules in self.modules:
                if _item_modules:
                    _items.append(_item_modules.to_dict())
            _dict["modules"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mounts (list)
        _items = []
        if self.mounts:
            for _item_mounts in self.mounts:
                if _item_mounts:
                    _items.append(_item_mounts.to_dict())
            _dict["mounts"] = _items
        # override the default output from pydantic by calling `to_dict()` of crew
        if self.crew:
            _dict["crew"] = self.crew.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShipyardShip from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "type": obj.get("type"),
                "name": obj.get("name"),
                "description": obj.get("description"),
                "activity": obj.get("activity"),
                "supply": obj.get("supply"),
                "purchasePrice": obj.get("purchasePrice"),
                "frame": (
                    ShipFrame.from_dict(obj["frame"])
                    if obj.get("frame") is not None
                    else None
                ),
                "reactor": (
                    ShipReactor.from_dict(obj["reactor"])
                    if obj.get("reactor") is not None
                    else None
                ),
                "engine": (
                    ShipEngine.from_dict(obj["engine"])
                    if obj.get("engine") is not None
                    else None
                ),
                "modules": (
                    [ShipModule.from_dict(_item) for _item in obj["modules"]]
                    if obj.get("modules") is not None
                    else None
                ),
                "mounts": (
                    [ShipMount.from_dict(_item) for _item in obj["mounts"]]
                    if obj.get("mounts") is not None
                    else None
                ),
                "crew": (
                    ShipyardShipCrew.from_dict(obj["crew"])
                    if obj.get("crew") is not None
                    else None
                ),
            }
        )
        return _obj
