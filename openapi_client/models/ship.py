# coding: utf-8

"""
SpaceTraders API

SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.

The version of the OpenAPI document: v2.3.0
Contact: joel@spacetraders.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from openapi_client.models.cooldown import Cooldown
from openapi_client.models.ship_cargo import ShipCargo
from openapi_client.models.ship_crew import ShipCrew
from openapi_client.models.ship_engine import ShipEngine
from openapi_client.models.ship_frame import ShipFrame
from openapi_client.models.ship_fuel import ShipFuel
from openapi_client.models.ship_module import ShipModule
from openapi_client.models.ship_mount import ShipMount
from openapi_client.models.ship_nav import ShipNav
from openapi_client.models.ship_reactor import ShipReactor
from openapi_client.models.ship_registration import ShipRegistration


class Ship(BaseModel):
    """
    Ship details.
    """  # noqa: E501

    symbol: StrictStr = Field(
        description="The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]-[HEX_ID]`"
    )
    registration: ShipRegistration
    nav: ShipNav
    crew: ShipCrew
    frame: ShipFrame
    reactor: ShipReactor
    engine: ShipEngine
    modules: List[ShipModule] = Field(description="Modules installed in this ship.")
    mounts: List[ShipMount] = Field(description="Mounts installed in this ship.")
    cargo: ShipCargo
    fuel: ShipFuel
    cooldown: Cooldown
    __properties: ClassVar[List[str]] = [
        "symbol",
        "registration",
        "nav",
        "crew",
        "frame",
        "reactor",
        "engine",
        "modules",
        "mounts",
        "cargo",
        "fuel",
        "cooldown",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Ship from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of registration
        if self.registration:
            _dict["registration"] = self.registration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nav
        if self.nav:
            _dict["nav"] = self.nav.to_dict()
        # override the default output from pydantic by calling `to_dict()` of crew
        if self.crew:
            _dict["crew"] = self.crew.to_dict()
        # override the default output from pydantic by calling `to_dict()` of frame
        if self.frame:
            _dict["frame"] = self.frame.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reactor
        if self.reactor:
            _dict["reactor"] = self.reactor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of engine
        if self.engine:
            _dict["engine"] = self.engine.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in modules (list)
        _items = []
        if self.modules:
            for _item_modules in self.modules:
                if _item_modules:
                    _items.append(_item_modules.to_dict())
            _dict["modules"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mounts (list)
        _items = []
        if self.mounts:
            for _item_mounts in self.mounts:
                if _item_mounts:
                    _items.append(_item_mounts.to_dict())
            _dict["mounts"] = _items
        # override the default output from pydantic by calling `to_dict()` of cargo
        if self.cargo:
            _dict["cargo"] = self.cargo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fuel
        if self.fuel:
            _dict["fuel"] = self.fuel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cooldown
        if self.cooldown:
            _dict["cooldown"] = self.cooldown.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Ship from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "symbol": obj.get("symbol"),
                "registration": (
                    ShipRegistration.from_dict(obj["registration"])
                    if obj.get("registration") is not None
                    else None
                ),
                "nav": (
                    ShipNav.from_dict(obj["nav"])
                    if obj.get("nav") is not None
                    else None
                ),
                "crew": (
                    ShipCrew.from_dict(obj["crew"])
                    if obj.get("crew") is not None
                    else None
                ),
                "frame": (
                    ShipFrame.from_dict(obj["frame"])
                    if obj.get("frame") is not None
                    else None
                ),
                "reactor": (
                    ShipReactor.from_dict(obj["reactor"])
                    if obj.get("reactor") is not None
                    else None
                ),
                "engine": (
                    ShipEngine.from_dict(obj["engine"])
                    if obj.get("engine") is not None
                    else None
                ),
                "modules": (
                    [ShipModule.from_dict(_item) for _item in obj["modules"]]
                    if obj.get("modules") is not None
                    else None
                ),
                "mounts": (
                    [ShipMount.from_dict(_item) for _item in obj["mounts"]]
                    if obj.get("mounts") is not None
                    else None
                ),
                "cargo": (
                    ShipCargo.from_dict(obj["cargo"])
                    if obj.get("cargo") is not None
                    else None
                ),
                "fuel": (
                    ShipFuel.from_dict(obj["fuel"])
                    if obj.get("fuel") is not None
                    else None
                ),
                "cooldown": (
                    Cooldown.from_dict(obj["cooldown"])
                    if obj.get("cooldown") is not None
                    else None
                ),
            }
        )
        return _obj
