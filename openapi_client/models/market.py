# coding: utf-8

"""
SpaceTraders API

SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.

The version of the OpenAPI document: v2.3.0
Contact: joel@spacetraders.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from openapi_client.models.market_trade_good import MarketTradeGood
from openapi_client.models.market_transaction import MarketTransaction
from openapi_client.models.trade_good import TradeGood


class Market(BaseModel):
    """
    Market details.
    """  # noqa: E501

    symbol: StrictStr = Field(
        description="The symbol of the market. The symbol is the same as the waypoint where the market is located."
    )
    exports: List[TradeGood] = Field(
        description="The list of goods that are exported from this market."
    )
    imports: List[TradeGood] = Field(
        description="The list of goods that are sought as imports in this market."
    )
    exchange: List[TradeGood] = Field(
        description="The list of goods that are bought and sold between agents at this market."
    )
    transactions: Optional[List[MarketTransaction]] = Field(
        default=None,
        description="The list of recent transactions at this market. Visible only when a ship is present at the market.",
    )
    trade_goods: Optional[List[MarketTradeGood]] = Field(
        default=None,
        description="The list of goods that are traded at this market. Visible only when a ship is present at the market.",
        alias="tradeGoods",
    )
    __properties: ClassVar[List[str]] = [
        "symbol",
        "exports",
        "imports",
        "exchange",
        "transactions",
        "tradeGoods",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Market from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in exports (list)
        _items = []
        if self.exports:
            for _item_exports in self.exports:
                if _item_exports:
                    _items.append(_item_exports.to_dict())
            _dict["exports"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in imports (list)
        _items = []
        if self.imports:
            for _item_imports in self.imports:
                if _item_imports:
                    _items.append(_item_imports.to_dict())
            _dict["imports"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in exchange (list)
        _items = []
        if self.exchange:
            for _item_exchange in self.exchange:
                if _item_exchange:
                    _items.append(_item_exchange.to_dict())
            _dict["exchange"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transactions (list)
        _items = []
        if self.transactions:
            for _item_transactions in self.transactions:
                if _item_transactions:
                    _items.append(_item_transactions.to_dict())
            _dict["transactions"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trade_goods (list)
        _items = []
        if self.trade_goods:
            for _item_trade_goods in self.trade_goods:
                if _item_trade_goods:
                    _items.append(_item_trade_goods.to_dict())
            _dict["tradeGoods"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Market from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "symbol": obj.get("symbol"),
                "exports": (
                    [TradeGood.from_dict(_item) for _item in obj["exports"]]
                    if obj.get("exports") is not None
                    else None
                ),
                "imports": (
                    [TradeGood.from_dict(_item) for _item in obj["imports"]]
                    if obj.get("imports") is not None
                    else None
                ),
                "exchange": (
                    [TradeGood.from_dict(_item) for _item in obj["exchange"]]
                    if obj.get("exchange") is not None
                    else None
                ),
                "transactions": (
                    [
                        MarketTransaction.from_dict(_item)
                        for _item in obj["transactions"]
                    ]
                    if obj.get("transactions") is not None
                    else None
                ),
                "tradeGoods": (
                    [MarketTradeGood.from_dict(_item) for _item in obj["tradeGoods"]]
                    if obj.get("tradeGoods") is not None
                    else None
                ),
            }
        )
        return _obj
