# coding: utf-8

"""
SpaceTraders API

SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.

The version of the OpenAPI document: v2.3.0
Contact: joel@spacetraders.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Annotated, Self

from openapi_client.models.system_faction import SystemFaction
from openapi_client.models.system_type import SystemType
from openapi_client.models.system_waypoint import SystemWaypoint


class System(BaseModel):
    """
    System details.
    """  # noqa: E501

    constellation: Optional[StrictStr] = Field(
        default=None, description="The constellation that the system is part of."
    )
    symbol: Annotated[str, Field(min_length=1, strict=True)] = Field(
        description="The symbol of the system."
    )
    sector_symbol: Annotated[str, Field(min_length=1, strict=True)] = Field(
        description="The symbol of the sector.", alias="sectorSymbol"
    )
    type: SystemType
    x: StrictInt = Field(
        description="Relative position of the system in the sector in the x axis."
    )
    y: StrictInt = Field(
        description="Relative position of the system in the sector in the y axis."
    )
    waypoints: List[SystemWaypoint] = Field(description="Waypoints in this system.")
    factions: List[SystemFaction] = Field(
        description="Factions that control this system."
    )
    name: Optional[StrictStr] = Field(
        default=None, description="The name of the system."
    )
    __properties: ClassVar[List[str]] = [
        "constellation",
        "symbol",
        "sectorSymbol",
        "type",
        "x",
        "y",
        "waypoints",
        "factions",
        "name",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of System from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in waypoints (list)
        _items = []
        if self.waypoints:
            for _item_waypoints in self.waypoints:
                if _item_waypoints:
                    _items.append(_item_waypoints.to_dict())
            _dict["waypoints"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in factions (list)
        _items = []
        if self.factions:
            for _item_factions in self.factions:
                if _item_factions:
                    _items.append(_item_factions.to_dict())
            _dict["factions"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of System from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "constellation": obj.get("constellation"),
                "symbol": obj.get("symbol"),
                "sectorSymbol": obj.get("sectorSymbol"),
                "type": obj.get("type"),
                "x": obj.get("x"),
                "y": obj.get("y"),
                "waypoints": (
                    [SystemWaypoint.from_dict(_item) for _item in obj["waypoints"]]
                    if obj.get("waypoints") is not None
                    else None
                ),
                "factions": (
                    [SystemFaction.from_dict(_item) for _item in obj["factions"]]
                    if obj.get("factions") is not None
                    else None
                ),
                "name": obj.get("name"),
            }
        )
        return _obj
