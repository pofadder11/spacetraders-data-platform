# coding: utf-8

"""
SpaceTraders API

SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.

The version of the OpenAPI document: v2.3.0
Contact: joel@spacetraders.io
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Annotated, Self

from openapi_client.models.activity_level import ActivityLevel
from openapi_client.models.supply_level import SupplyLevel
from openapi_client.models.trade_symbol import TradeSymbol


class MarketTradeGood(BaseModel):
    """
    MarketTradeGood
    """  # noqa: E501

    symbol: TradeSymbol
    type: StrictStr = Field(
        description="The type of trade good (export, import, or exchange)."
    )
    trade_volume: Annotated[int, Field(strict=True, ge=1)] = Field(
        description="This is the maximum number of units that can be purchased or sold at this market in a single trade for this good. Trade volume also gives an indication of price volatility. A market with a low trade volume will have large price swings, while high trade volume will be more resilient to price changes.",
        alias="tradeVolume",
    )
    supply: SupplyLevel
    activity: Optional[ActivityLevel] = None
    purchase_price: Annotated[int, Field(strict=True, ge=0)] = Field(
        description="The price at which this good can be purchased from the market.",
        alias="purchasePrice",
    )
    sell_price: Annotated[int, Field(strict=True, ge=0)] = Field(
        description="The price at which this good can be sold to the market.",
        alias="sellPrice",
    )
    __properties: ClassVar[List[str]] = [
        "symbol",
        "type",
        "tradeVolume",
        "supply",
        "activity",
        "purchasePrice",
        "sellPrice",
    ]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["EXPORT", "IMPORT", "EXCHANGE"]):
            raise ValueError(
                "must be one of enum values ('EXPORT', 'IMPORT', 'EXCHANGE')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketTradeGood from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketTradeGood from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "symbol": obj.get("symbol"),
                "type": obj.get("type"),
                "tradeVolume": obj.get("tradeVolume"),
                "supply": obj.get("supply"),
                "activity": obj.get("activity"),
                "purchasePrice": obj.get("purchasePrice"),
                "sellPrice": obj.get("sellPrice"),
            }
        )
        return _obj
